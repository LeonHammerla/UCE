{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Unified Corpus Explorer <p>The Unified Corpus Explorer (UCE) is a generic NLP application developed by the Text Technology Lab that allows the automatic creation of a fully featured portal for your annotated corpora. UCE is standardized in the sense that it's dockerized, reusable, and follows strict schemata\u2014one of which is the UIMA format. To import data and set up your own UCE instance, it is required that the data is annotated or at least exists in UIMA format.</p> <p>This documentation includes step-by-step tutorials for developers as well as users, and shows easy-to-follow instructions. The easiest scenario\u2014one where the data already exists in UIMA format and simply needs to be set up and imported into the UCE instance\u2014can be done with Docker knowledge only.</p> <p>Below you find some running instances of different projects using UCE for their corpora</p>"},{"location":"#running-uce-instances","title":"Running UCE Instances","text":"<p>UCE is used by different projects to visualize their corpora and to provide a generic, but flexible webportal for their users. Here we list some of those UCE instances.</p> Url Project Description URL BIOfid The Specialised Information Service Biodiversity Research (BIOfid) provides access to current and historical biodiversity literature. URL PrismAI A dataset for the systematic detection of AI-generated text, containg both English and German texts from 8 domains, synthesized using state-of-the-art LLMs."},{"location":"getting-started/","title":"Getting Started","text":"<p>In general, UCE currently consists of 5 microservices, each dockerized and orchestrated via Docker Compose to form the application that is UCE. Among these 5 services, some are obligatory (must-haves) and some are optional (specific use cases).</p> Service Description Obligatory Web Portal The web portal provides access to UCE for the user. It is the heart of UCE, communicating with and orchestrating all other services. \u2705 PostgreSQL DB The PostgreSQL database is the main database within UCE. It stores all data in a structured way and adds vector support through the pgvector extension. \u2705 Corpus Importer              The Importer handles the importing of UIMA-annotated corpora. Given a path, it will load UIMA files and project them into the UCE environment.             Without the importer, there is currently no other way to get data into UCE              (IO REST endpoints in UCE exist, but aren't production-ready yet).          \u2705 RAG Service The RAG service is a Python web server that primarily enables access to machine learning and AI models. It is required to calculate embeddings and enable the RAG bot. \u274c Sparql Service The (Fuseki) Sparql service allows the integration of ontological hierarchies in RDF or OWL format into UCE's searches. \u274c <p>In the following, you will learn how to set up these services and how to get started with your own UCE instance for your data.</p> <p>Structure</p> <p>The following sections are split into two parts:</p> <ul> <li>Setting up UCE as a user (Docker). </li> <li>Setting up UCE as an active developer (local). </li> </ul> <p>Depending on your use case, you will either set up the development environment or simply build UCE, import your data, and use it.</p>"},{"location":"getting-started/corpus-config/","title":"Corpus Config","text":"corpusConfig.json<pre><code>{\n  \"name\": \"Corpus_Name\",\n  \"author\": \"University Doe\",\n  \"language\": \"de-DE/en-EN/...\",\n  \"description\": \"The corpus was gathered as part of the John Doe project.\",\n  \"addToExistingCorpus\": true,\n\n  \"annotations\": {\n    \"annotatorMetadata\": false,\n\n    \"OCRPage\": false,\n    \"OCRParagraph\": false,\n    \"OCRBlock\": false,\n    \"OCRLine\": false,\n\n    \"srLink\": false,\n    \"lemma\": false,\n    \"namedEntity\": false,\n    \"sentence\": false,\n    \"taxon\": {\n      \"annotated\": false,\n      \"//comment\": \"[Are the taxons annotated with biofid onthologies through the 'identifier' property?]\",\n      \"biofidOnthologyAnnotated\": false\n    },\n    \"time\": false,\n    \"wikipediaLink\": false\n  },\n  \"other\": {\n    \"//comment\": \"[Is this corpus also available on https://sammlungen.ub.uni-frankfurt.de/? Either true or false]\",\n    \"availableOnFrankfurtUniversityCollection\": false,\n\n    \"includeTopicDistribution\": false,\n    \"enableEmbeddings\": false,\n    \"enableRAGBot\": false\n  }\n}\n</code></pre>"},{"location":"getting-started/corpus-importer/","title":"Corpus Importer","text":"<p>Prerequisites</p> <p>This section requires that you have already set up the PostgreSQL DB and, preferably, the Web Portal. If not, refer to the respective documentation.</p> <p>The Corpus-Importer is a Java application that transforms and imports UIMA-annotated data from a local path into the UCE environment. Depending on the configuration, it also performs post-processing of the data, such as the creation of embedding spaces.</p> <p>UIMA</p> <p>If the data is not yet available in UIMA format, refer to the respective documentation, which also utilizes the Docker Unified UIMA Interface to transform, process, and annotate the data in UIMA format the best way possible. After having transformed your data, proceed here.</p>"},{"location":"getting-started/corpus-importer/#folder-structure","title":"Folder Structure","text":"<p>Having set up the database and the web portal (locally or via docker), all that is left to do is to tell the importer where to import from and start it.</p> <p>For this, the importer always requires the following folder structure:</p> Required Folder Structure<pre><code>\ud83d\udcc1 corpus_a\n\u2502   \ud83d\udcc4 corpusConfig.json\n\u2514\u2500\u2500\u2500\ud83d\udcc1 input\n    \u2502   \ud83d\udcc4 uima_doc_1.xmi\n    \u2502   \ud83d\udcc4 uima_doc_2.xmi\n    \u2502   \ud83d\udcc4 ...\n    \u2502   \ud83d\udcc4 uima_doc_n.xmi\n</code></pre> <p>where <code>corpusConfig.json</code> holds metadata, and the <code>input</code> folder contains the actual UIMA files for a single corpus.</p> <p>Input Structure</p> <p>As of now, the importer will recursively walk through the <code>input</code> folder, so every <code>.xmi</code> file in any subfolder will be considered.</p>"},{"location":"getting-started/corpus-importer/#user-setup","title":"User Setup","text":"<p>Open the <code>docker-compose.yaml</code> file (if you haven't created the <code>.env</code> file yet, see here) and locate the <code>uce-importer</code> service. Within it, mount all local paths to the corpora you want to import using the structure described above, and map them like so: </p> <pre><code>volumes:\n    - \"./path/to/my_corpora/corpus_a:/app/input/corpora/corpus_a\"\n    - \"./path/to/other_corpora/corpus_b:/app/input/corpora/corpus_b\"\n    - \"...\"\n</code></pre> <p>You can mount as many corpora as you like using the same structure. Remember that you can adjust the amount of threads used through the <code>.env</code> file.</p> <p>Afterwards, simply start the importer through the compose:</p> <pre><code>docker-compose up --build uce-importer\n</code></pre>"},{"location":"getting-started/corpus-importer/#developer-setup","title":"Developer Setup","text":"<p>In the source code, identify the module <code>uce.corpus-importer</code> and set up your IDE:</p> <p>Setup</p> <ul> <li>Add a new <code>Application</code> configuration  </li> <li>UCE is developed in Java 21 </li> <li>Set <code>-cp corpus-importer</code> </li> <li>Main class: <code>org.texttechnologylab.App</code> </li> <li>CLI arguments are obligatory:<ul> <li><code>-src \"./path/to/your_corpus/\"</code></li> <li><code>-num 1</code></li> <li><code>-t 1</code></li> </ul> </li> <li>Maven should automatically download and index the dependencies. If, for some reason, it does not, you can force an update via <code>mvn clean install -U</code> (in IntelliJ, open <code>Execute Maven Goal</code>, then enter the command).</li> </ul> <p>Open the <code>common.conf</code> file and adjust the database connection parameters to match your database (port, host, etc.). Now start the importer and import your corpus. Refer to CLI Arguments for a full list of possible parameters.</p> <p>Logs</p> <p>The importer logs to both the PostgreSQL database (tables <code>uceimport</code> and <code>importlog</code>) and the local <code>logs</code> directory within the container. Both logs also appear in the standard output of the console.</p>"},{"location":"getting-started/corpus-importer/#cli-arguments","title":"CLI Arguments","text":"Argument Description <code>-src</code> <code>--importSrc</code> The path to the corpus source where the UIMA-annotated files are stored. <code>-srcDir</code> <code>--importDir</code> Unlike <code>-src</code>, <code>-srcDir</code> is the path to a directory that holds multiple importable <code>src</code> paths. The importer will check for folders within this directory, where each folder should be an importable corpus with a corpusConfig.json and its input UIMA-files. Those are then imported. <code>-num</code> <code>--importerNumber</code> When starting multiple importers, assign an id to each instance by counting up from 1 to n (not relevant as off now, just set it to 1). <code>-t</code> <code>--numThreads</code> UCE imports asynchronous. Decide with how many threads, e.g. 4-8-16. By default, this is single threaded."},{"location":"getting-started/webportal/","title":"Web Portal","text":"<p>The heart of UCE is its webportal, which, alongside the Postgresql database, are the primary microservices we will setup first, as these services are obligatory.</p>"},{"location":"getting-started/webportal/#user-setup","title":"User Setup","text":"<p>When building from source (the option to pull finished images will be added soon), clone the UCE repository:</p> <pre><code>git clone https://github.com/texttechnologylab/UCE.git\n</code></pre> <p>In the root folder, create a <code>.env</code> file that holds the variables for the <code>docker-compose.yaml</code> file. E.g.:</p> .env<pre><code>UCE_CONFIG_PATH=./../uceConfig.json\nJVM_ARGS=-Xmx8g\nTDB2_DATA=./../tdb2-database\nTDB2_ENDPOINT=tdb2-database-name\nIMPORTER_THREADS=1\n</code></pre> <ul> <li><sup><code>UCE_CONFIG_PATH</code>: The local path to the UceConfig that injects personal customization into the UCE instance. If none is given, UCE will fallback to a default configuration.</sup></li> <li><sup><code>JVM_ARGS</code>: Only relevant if the Sparql microservice is added. Specifies the maximum size, in bytes, of the memory allocation pool for the service.</sup></li> <li><sup><code>TDB2_DATA/ENDPOINT</code>: Only relevant if the Sparql microservice is added. The local path to a TDB2 database and the name of the endpoint, this database will be exposed to (e.g.: /uce-ontology).</sup></li> <li><sup><code>IMPORTER_THREADS</code>: The amount of parallel threads used by the Importer to import the corpora (standard values are 4, 8 or 16, depending on your setup).</sup></li> </ul> <p>Start the relevant docker containers:</p> <pre><code>docker-compose up --build uce-postgresql-db uce-web\n</code></pre> <p>The web instance, by default, is reachable under: <code>http://localhost:8008</code>.</p> <p>Problems?</p> <p>If the webportal container isn't working, it most likely can't connect to the database. In that case, you can check the connection strings within the <code>common.conf</code> file in the source code. For the docker setup, the content of this file should match the <code>common-release.conf</code>, which should again match the exposed ports in the <code>docker-compose.yaml</code>.</p>"},{"location":"getting-started/webportal/#developer-setup","title":"Developer Setup","text":"<p>Developer Code</p> <p>Please refer to the Developer Code for details on how to correctly develop UCE.</p> <p>Clone the UCE repo and switch to the <code>develop</code> branch:</p> <pre><code>git clone https://github.com/texttechnologylab/UCE.git\ngit fetch --all\ngit checkout origin develop\n</code></pre> <p>Before opening the repo in an IDE of your choice (but for this documentation, we will always refer to IntelliJ), we have to setup the database first.</p>"},{"location":"getting-started/webportal/#database","title":"Database","text":"<p>To set up the PostgreSQL database, you can either use a Docker image (refer to User Setup to do so via the compose file or simply pull the official pgvector image) or install the database locally. When installing it locally, you must install the <code>pgvector</code> extension, as we configure PostgreSQL to work with high-dimensional embedding vectors for UCE. This requires a manual but simple installation.</p> <p>Local Installation</p> <p>If installed locally, you also need to manually create a database called <code>uce</code>, with the owner set to <code>postgres</code> and the default password set to <code>1234</code>. If you adjust any of these parameters, you must also update the corresponding values in the source code's <code>common.conf</code>.</p> <p>Respectively, when running the container from the official image (and not UCE's docker-compose), pass these parameters into the container: <pre><code>POSTGRES_DB: uce\nPOSTGRES_USER: postgres\nPOSTGRES_PASSWORD: 1234\n</code></pre></p>"},{"location":"getting-started/webportal/#web","title":"Web","text":"<p>If the PostgreSQL DB is running, start by opening IntelliJ from within the <code>uce.portal</code> folder (not the root of the repo) and setting up the IDE for the web portal:</p> <p>Setup</p> <ul> <li>Add a new <code>Application</code> configuration  </li> <li>UCE is being developed in Java 21 </li> <li>Set <code>-cp web</code> </li> <li>Main class: <code>org.texttechnologylab.App</code> </li> <li>Program arguments can be left empty for now. For a list of potential CLI arguments, refer to the documentation.</li> <li>Maven should automatically download and index the dependencies. If, for some reason, it does not, you can force an update via <code>mvn clean install -U</code> (in IntelliJ, open <code>Execute Maven Goal</code>, then enter the command).</li> </ul> <p>Now start the web portal. The default URL is <code>http://localhost:4567</code> and, if done correctly, the portal will appear with no corpora available. We will now set up the Corpus-Importer to import corpora.</p> <p>Java Version Error?</p> <p>Make sure that IntelliJ's Java compiler is also set to match the target bytecode version 21. Otherwise, startup will result in an error. You can check this via <code>Settings</code> \u2192 <code>Build, Execution, Deployment</code> \u2192 <code>Compiler</code> \u2192 <code>Java Compiler</code>.</p>"},{"location":"getting-started/webportal/#cli-arguments","title":"CLI Arguments","text":""},{"location":"getting-started/webportal/#web-portal","title":"Web Portal","text":"Argument Description <code>-cf</code> <code>--configFile</code> The local path to the uceConfig.json. If started through a Docker container, remember to first mount the local path and then map the <code>-cf</code> path to the mounted Docker path. <code>-cj</code> <code>--configJson</code> Instead of passing the UCE configuration through a JSON file, you can also directly pass in the JSON."}]}